---
name: Release the ansible collection
on:
  workflow_call:
    inputs:
      ah_publish:
        description: Publish the collection on automation hub
        default: true
        type: boolean
      environment:
        description: The deployment environment
        required: true
        type: string
      galaxy_publish:
        default: true
        description: Publish the collection on galaxy
        type: boolean
    secrets:
      ah_token:
        required: false
      ansible_galaxy_api_key:
        required: false

jobs:
  release_automation_hub:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - name: "Build the collection"
        run: |
          ansible-galaxy collection build -v --force

      - name: "Publish the collection on Automation Hub"
        if: ${{ inputs.ah_publish }}
        run: |
          echo "${{ secrets.ah_token != '' }}"
          echo "${{ secrets.ansible_galaxy_api_key != '' }}"
          [[ "${{ secrets.ah_token != '' }}" ]] || { echo "ah_token is required to publish on automation hub" ; exit 0; }
          echo "${{ secrets.ah_token != '' }}"
          TARBALL=$(ls -1 ./*.tar.gz)
          cat << EOF > ansible.cfg
          [galaxy]
          server_list = rh_automation_hub
          [galaxy_server.rh_automation_hub]
          url=https://cloud.redhat.com/api/automation-hub/
          auth_url=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
          echo "${{ secrets.ah_token != '' }}"
          rm ansible.cfg

        # token=${{ secrets.ah_token }}
        # EOF
        # ansible-galaxy collection publish "${TARBALL}"

  release_galaxy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    # needs: [release_automation_hub]
    steps:
      - uses: actions/checkout@v3

      - name: "Build the collection"
        run: |
          ansible-galaxy collection build -v --force

      - name: "Publish the collection on Galaxy"
        if: ${{ inputs.galaxy_publish }}
        run: |
          echo "${{ secrets.ansible_galaxy_api_key != '' }}"
          [[ "${{ secrets.ansible_galaxy_api_key != '' }}" ]] || { echo "ansible_galaxy_api_key is required to publish on galaxy" ; exit 0; }
          TARBALL=$(ls -1 ./*.tar.gz)
        # ansible-galaxy collection publish "${TARBALL}" --api-key "${{ secrets.ansible_galaxy_api_key }}"
